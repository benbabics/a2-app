// See http://www.jshint.com/docs/ for all JSHint options

{
    "passfail"     : false,    // Whether the scan should stop on first error.
    "maxerr"       : 100,      // Maximum errors before stopping.


    // == Environments ====================================================
    //
    // These options pre-define global variables that are exposed by
    // popular JavaScript libraries and runtime environments such as
    // browser or node.js.


    "browser"      : true,     // Whether the standard browser globals should be predefined.
    "couch"        : false,    // Whether CouchDB globals should be predefined.
    "node"         : false,    // Whether the Node.js environment globals should be predefined.
    "nonstandard"  : false,    // Whether non-standard (but widely adopted) globals should be predefined.
    "rhino"        : false,    // Whether the Rhino environment globals should be predefined.
    "worker"       : false,    // Whether Web Worker globals should be predefined.
    "wsh"          : false,    // Whether the Windows Scripting Host environment globals should be predefined.

    "dojo"         : false,    // Whether Dojo Toolkit globals should be predefined.
    "jquery"       : true,     // Whether jQuery globals should be predefined.
    "phantom"      : true,     // Whether Phantom globals should be predefined.
    "prototypejs"  : false,    // Whether Prototype and Scriptaculous globals should be predefined.
    "mootools"     : false,    // Whether MooTools globals should be predefined.
    "yui"          : false,    // Whether YUI globals should be predefined.


    // == Custom predefined globals ====================================================
    //
    // For value examples, see https://github.com/jshint/jshint/blob/c047ea1b01097fcc220fcd1a55c41f67ae2e6e81/jshint.js#L556

    "globals"      :  {
        "window"	           : false,

        // Angular
        "angular"              : false,
        "module"               : false,
        "inject"               : false,
        "common"               : false,
        "$document"            : false,
        "$window"              : false,
        "$timeout"             : false,
        "$interval"            : false,

        // Backbone
        "Backbone"             : false,

        // Cordova
        "Connection"           : false,
        "device"               : false,

        // Jasmine
        "jasmine"              : false,
        "isCommonJS"           : false,
        "exports"              : false,
        "spyOn"                : false,
        "it"                   : false,
        "xit"                  : false,
        "expect"               : false,
        "runs"                 : false,
        "waits"                : false,
        "waitsFor"             : false,
        "beforeAll"            : false,
        "beforeEach"           : false,
        "afterAll"             : false,
        "afterEach"            : false,
        "describe"             : false,
        "xdescribe"            : false,
        "loadFixtures"         : false,
        "AsyncSpec"            : false,

        // Require
        "define"               : false,
        "require"              : false,

        // Plugins/Libraries/APIs
        "ApplicationInfo"      : false,
        "facebookConnectPlugin": false,
        "google"               : false,
        "_"                    : false,
        "cordova"              : false,
        "StatusBar"            : false,

        // Phantom
        "phantom"              : false,

        // Protractor
        "protractor"           : false,
        "browser"              : false,
        "element"              : false,
        "by"                   : false
    },


    // == Development  ====================================================

    "debug"        : false,    // Whether debugger statements should be allowed.
    "devel"        : true,     // Whether logging globals should be predefined (console, alert, etc.).


    // == ECMAScript 5  ====================================================

    "strict"       : true,     // Whether the "use strict"; pragma should be required.
    "globalstrict" : false,    // Whether global "use strict"; should be allowed (also enables strict).


    // == Enforcing Options ===============================================
    //
    // These options tell JSHint to be more strict towards your code. Use
    // them if you want to allow only a safe subset of JavaScript, very
    // useful when your codebase is shared with a big number of developers
    // with different skill levels.


    "bitwise"      : true,     // Whether bitwise operators (&, |, ^, etc.) should be forbidden.
    "curly"        : true,     // Whether curly braces around all blocks should be required.
    "eqeqeq"       : true,     // Whether `===` and `!==` should be required (instead of `==` and `!=`).
    "es3"          : false,    // Whether the code needs to adhere to ECMAScript 3 specification
    "forin"        : true,     // Whether `for in` loops must filter with `hasOwnPrototype`.
    "freeze"       : true,     // Whether overwriting prototypes of native objects should be prohibited.
    "immed"        : true,     // Whether immediate invocations must be wrapped in parens, e.g. `( function(){}() );`.
    "latedef"      : true,     // Whether use before define should be forbidden.
    "noarg"        : true,     // Whether arguments.caller and arguments.callee should be forbidden.
    "regexp"       : true,     // Whether `.` should be forbidden in regexp literals.
    "undef"        : true,     // Whether variables must be declared before used.
    "unused"       : true,     // Whether variables must be used if defined.


    // == Relaxing Options ================================================
    //
    // These options allow you to suppress certain types of warnings. Use
    // them only if you are absolutely positive that you know what you are
    // doing.

    "asi"          : false,    // Whether automatic semicolon insertion should be allowed.
    "boss"         : false,    // Whether assignments inside `if`, `for` and `while` should be allowed. Usually conditions and loops are for comparison, not assignments.
    "eqnull"       : true,     // Whether `== null` comparisons should be allowed, even if `eqeqeq` is `true`.
    "esnext"       : true,     // Whether es.next specific syntax should be allowed.
    "evil"         : false,    // Whether `eval` should be allowed.
    "expr"         : false,    // Whether ExpressionStatement should be allowed as Programs.
    "funcscope"    : false,    // Whether only function scope should be used for scope tests.
    "gcl"          : true,     // Whether JSHint should be compatible with Google Closure Compiler.
    "iterator"     : true,     // Whether the `__iterator__` property should be allowed.
    "lastsemic"    : false,    // Whether semicolons may be ommitted for the trailing statements inside of a one-line blocks.
    "laxbreak"     : false,    // Whether line breaks should not be checked, e.g. `return [\n] x`.
    "laxcomma"     : false,    // Whether line breaks should not be checked around commas.
    "loopfunc"     : false,    // Whether functions should be allowed to be defined within loops.
    "moz"          : false,    // Whether Mozilla JavaScript extensions should be allowed.
    "notypeof"     : false,    // Whether invalid typeof operator values should be allowed.
    "proto"        : false,    // Whether the `__proto__` property should be allowed.
    "scripturl"    : true,     // Whether script-targeted URLs should be allowed.
    "smarttabs"    : false,    // Whether smarttabs should be allowed (http://www.emacswiki.org/emacs/SmartTabs).
    "shadow"       : false,    // Whether variable shadowing should be allowed.
    "supernew"     : true,     // Whether `new function () { ... };` and `new Object;` should be allowed.
    "validthis"    : true,     // Whether `this` inside a non-constructor function should be allowed.
    "noyield"      : false,    // Whether generator functions should be allowed with no yield statement in them.


    // == Style preferences  ================================================

    "camelcase"    : true,     // Whether variables names must be camelCase style or UPPER_CASE with underscores
    "indent"       : 4,        // Specify indentation.
    "maxparams"    : 4,        // Maximum allowed params.
//  "maxdepth"     : 2,        // Maximum allowed depth of nested blocks.
//  "maxstatements": 4,        // Maximum number of statements allowed per function.
//  "maxcomplexity": ,         // Maximum allowed Cyclomatic complexity.
    "maxlen"       : 120,      // Maximum allowed characters in a line.
    "multistr"     : false,    // Allow multiline strings.
    "newcap"       : true,     // Whether constructor names must be capitalized.
    "noempty"      : false,    // Whether empty blocks should be forbidden.
    "nonbsp"       : true,     // Whether "non-breaking whitespace" characters should be forbidden.
    "nonew"        : false,    // Whether using `new` for side-effects should be forbidden.
    "plusplus"     : false,    // Whether increment and decrement (`++` and `--`) should be forbidden.
    "quotmark"     : "double", // Whether consistency in quotation marks should be enforced.
    "sub"          : false,    // Whether all forms of subscript notation are allowed.
    "trailing"     : true      // Whether trailing whitespace rules apply.

}